main:
rep #$30

lda {game_state}
bne +
jsr initiate_player
jsr initiate_level
inc {game_state}
+;
jsr object_handler
jsr build_hioam
jsr getCHR
rts

include "build hioam.txt"
include "get CHR.txt"
include "tile collision.txt"
include "initiate level.txt"


draw_sprite:
ldy {sprite_number}
cpy #$0200
beq +
lda {x_pos},x
sec
sbc {bg1x}
cmp #$1000
bpl +
cmp #$ff00
bmi +
lsr #4
and #$01ff
ora {sprite_size}
sta {oam},y
sta {oam}+$0200,y
lda {y_pos},x
sec
sbc {bg1y}
cmp #$0e00
bpl +
cmp #$ff00
bmi +
lsr #4
sta {oam}+1,y
lda {attributes}
sta {oam}+2,y
lda.w #{dynamic_CHR_table}
sta {oam}+$0202,y
iny #4
sty {sprite_number}
+;
rts


object_handler:
ldx #$0000
-;
lda {object_id},x
bne +
end:
inx #2
cpx #$0100
bne -
rts
+;
jmp ({object_id},x)


ball:
sep #$10
lda {x_pos_lo},x
clc
adc {x_vel_lo},x
sta {x_pos_lo},x
lda {x_pos},x
sta {prev_x}
adc {x_vel},x
sta {x_pos},x
lda {y_pos_lo},x
clc
adc {y_vel_lo},x
sta {y_pos_lo},x
lda {y_pos},x
sta {prev_y}
adc {y_vel},x
sta {y_pos},x
rep #$10
jsr tile_collision

lda {collision},x
beq ++
bit #$00f3
beq +
stz {y_pos_lo},x
lda #$0000
sec
sbc {y_vel_lo},x
sta {y_vel_lo},x
lda #$0000
sbc {y_vel},x
sta {y_vel},x
+;
lda {collision},x
bit #$000c
beq +
stz {x_pos_lo},x
lda #$0000
sec
sbc {x_vel_lo},x
sta {x_vel_lo},x
lda #$0000
sbc {x_vel},x
sta {x_vel},x
+;
jsr draw_sprite
jmp end

lda {collision},x	//this part is unreacheable
bit #$00f0
beq +
ldy {x_vel_lo},x
lda {y_vel_lo},x
sta {x_vel_lo},x
tya
sta {y_vel_lo},x
ldy {x_vel},x
lda {y_vel},x
sta {x_vel},x
tya
sta {y_vel},x
+;
jsr draw_sprite
jmp end


initiate_objects:
lda #$3001
sta {attributes}
lda #$0060
sta {width}
lda #$0080
sta {height}
ldy #$0000
lda #$0008
sta {angle}
lda #$0001
sta {amplitude}
-;
lda #ball
sta {object_id},y
lda #$07c0
sta {x_pos},y
lda #$06c0
sta {y_pos},y
jsr angle_to_velocity
lda {angle}
clc
adc #$0010
sta {angle}
iny #2
cpy #$0080
bne -
rts


initiate_player:
lda #$0200
sta {sprite_size}
lda #$3002
sta {attributes}
lda #$00f0
sta {width}
sta {height}
lda #player
sta {object_id}
lda #$0780
sta {x_pos}
lda #$0680
sta {y_pos}
rts

define gravity($0004)

top_down_player:
lda {x_pos},x
sta {prev_x}
lda {y_pos},x
sta {prev_y}
lda {joypad1}
bit #$0100
beq +
lda {x_pos},x
clc
adc #$0010
sta {x_pos},x
+;
lda {joypad1}
bit #$0200
beq +
lda {x_pos},x
sec
sbc #$0010
sta {x_pos},x
+;
lda {joypad1}
bit #$0400
beq +
lda {y_pos},x
clc
adc #$0010
sta {y_pos},x
+;
lda {joypad1}
bit #$0800
beq +
lda {y_pos},x
sec
sbc #$0010
sta {y_pos},x
+;
jsr tile_collision
jsr camera
jsr draw_sprite
jmp end

player:
lda {x_pos},x
sta {prev_x}
lda {y_pos},x
sta {prev_y}
lda {joypad1}
bit #$0100
beq +
lda {x_pos},x
clc
adc #$0010
sta {x_pos},x
+;
lda {joypad1}
bit #$0200
beq +
lda {x_pos},x
sec
sbc #$0010
sta {x_pos},x
+;
lda {trigger1}
bit #$8000
beq ++
lda {gravity_direction}
beq +
lda {collision},x
bit #$00c2
beq ++
lda #$0010
sta {jump_timer}
bra ++
+;
lda {collision},x
bit #$0031
beq +
lda #$0010
sta {jump_timer}
+;
lda {jump_timer}
beq ++
dec {jump_timer}
lda {joypad1}
bit #$8000
beq ++
stz {collision},x
lda {gravity_direction}
beq +
lda #$0040
sta {y_vel},x
bra ++
+;
lda #$ffc0
sta {y_vel},x
+;
lda {joypad1}
bit #$0400
beq +
stz {gravity_direction}
+;
lda {joypad1}
bit #$0800
beq +
lda #$0001
sta {gravity_direction}
+;
lda {gravity_direction}
bne +
lda {y_vel},x
clc
adc #{gravity}
sta {y_vel},x
clc
adc {y_pos},x
sta {y_pos},x
lda {collision},x
bit #$00c2
beq +
stz {y_vel},x
+;
lda {gravity_direction}
beq +
lda {y_vel},x
sec
sbc #{gravity}
sta {y_vel},x
clc
adc {y_pos},x
sta {y_pos},x
lda {collision},x
bit #$0031
beq +
stz {y_vel},x
+;
lda {y_pos},x
sec
sbc {prev_y}
cmp #$0080
bmi +
lda #$0080
+;
cmp #$ff80
bpl +
lda #$ff80
+;
clc
adc {prev_y}
sta {y_pos},x
lda {gravity_direction}
inc
sta {collision_type}
jsr tile_collision
lda {gravity_direction}
bne +
lda {collision},x
bit #$0031
beq +
stz {y_vel},x
+;
lda {gravity_direction}
beq +
lda {collision},x
bit #$00c2
beq +
stz {y_vel},x
+;
jsr camera
jsr draw_sprite
jmp end


sideways_player:
lda {x_pos},x
sta {prev_x}
lda {y_pos},x
sta {prev_y}
lda {joypad1}
bit #$0400
beq +
lda {y_pos},x
clc
adc #$0010
sta {y_pos},x
+;
lda {joypad1}
bit #$0800
beq +
lda {y_pos},x
sec
sbc #$0010
sta {y_pos},x
+;
lda {trigger1}
bit #$8000
beq ++
lda {gravity_direction}
beq +
lda {collision},x
bit #$0058
beq ++
lda #$0010
sta {jump_timer}
bra ++
+;
lda {collision},x
bit #$00a4
beq +
lda #$0010
sta {jump_timer}
+;
lda {jump_timer}
beq ++
dec {jump_timer}
lda {joypad1}
bit #$8000
beq ++
stz {collision},x
lda {gravity_direction}
beq +
lda #$0040
sta {x_vel},x
bra ++
+;
lda #$ffc0
sta {x_vel},x
+;
lda {joypad1}
bit #$0100
beq +
stz {gravity_direction}
+;
lda {joypad1}
bit #$0200
beq +
lda #$0001
sta {gravity_direction}
+;
lda {gravity_direction}
bne +
lda {x_vel},x
clc
adc #{gravity}
sta {x_vel},x
clc
adc {x_pos},x
sta {x_pos},x
+;
lda {gravity_direction}
beq +
lda {x_vel},x
sec
sbc #{gravity}
sta {x_vel},x
clc
adc {x_pos},x
sta {x_pos},x
+;
lda {x_pos},x
sec
sbc {prev_x}
cmp #$0080
bmi +
lda #$0080
+;
cmp #$ff80
bpl +
lda #$ff80
+;
clc
adc {prev_x}
sta {x_pos},x
lda {gravity_direction}
clc
adc #$0003
sta {collision_type}
jsr tile_collision
lda {gravity_direction}
bne +
lda {collision},x
bit #$0054
beq +
stz {x_vel},x
+;
lda {gravity_direction}
beq +
lda {collision},x
bit #$00a8
beq +
stz {x_vel},x
+;
jsr camera
jsr draw_sprite
jmp end


camera:
lda {x_pos},x
sec
sbc #$0780
sta {bg1x}
lda {y_pos},x
sec
sbc #$0680
sta {bg1y}
rts


tile_attributes:
dw $0000,$0002,$0004,$0006,$0008,$000a,$000c,$000e
dw $0020,$0022,$0024,$0026,$0028,$002a,$002c,$002e
dw $0040,$0042,$0044,$0046,$0048,$004a,$004c,$004e
dw $0060,$0062,$0064,$0066,$0068,$006a,$006c,$006e
dw $0080,$0082,$0084,$0086,$0088,$008a,$008c,$008e
dw $00a0,$00a2,$00a4,$00a6,$00a8,$00aa,$00ac,$00ae
dw $00c0,$00c2,$00c4,$00c6,$00c8,$00ca,$00cc,$00ce
dw $00e0,$00e2,$00e4,$00e6,$00e8,$00ea,$00ec,$00ee

angle_to_velocity:
lda {angle}
asl
tax
lda indirect_cosine_table,x
sta {temp}
lda {amplitude}
dec
asl
asl
tsb {temp}
ora indirect_sine_table,x
tax
lda.l sine_multiplication_table,x
sta {x_vel_lo},y
lda.l sine_multiplication_table+2,x
sta {x_vel},y
ldx {temp}
lda.l sine_multiplication_table,x
sta {y_vel_lo},y
lda.l sine_multiplication_table+2,x
sta {y_vel},y
rts


indirect_sine_table:

define n(0)
while {n} < 256 {
dw ((256 + {n})*128)
evaluate n({n}+1)
}

indirect_cosine_table:

dw 511*128

define n(0)
while {n} < 511 {
dw ((511 - {n})*128)
evaluate n({n}+1)
}

define n(0)
while {n} < 512 {
dw ({n}*128)
evaluate n({n}+1)
}